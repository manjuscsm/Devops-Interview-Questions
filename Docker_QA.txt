1  * Entrypoint in Docker?
	Similar to commands (CMD), where executable's are set when containers are initiated
	Unlinke CMD, entrypoint cannot be overridden 

    =============>entryponit allows to set the executables when containers are intiated.
    or ENTRYPOINT are used to define the execution command of the container when the containers are created.

2  * CMD vs Entrypoint ?

		CMD --> when we use multiple CMD's in a dockerfile, lat	est CMD instruction is applied
		     CMD can also be overridden when CMD is given at run time when initiating a container 
		Entrypoint --> When given in run time, entrypoint value is appended 
	CMD command can be overridden at run time.
	ENTRYPOINT can't be overidden at the runtime but the run time command become parameters to ENTRYPOINT command.
 
3  * ADD and Copy ?

	ADD --> Copy the file and also unzipping/extract a exiting tar/zipped file
		   If given a link, then it would download the file and copy it to the destination
	COPY --> It will only the copy the file to the destination 

4  * At the time of docker build –t cmd execution if you press CTRL+C, what happens ?

		It will stop the build process 

5  * Docker file size is 2GB and need to reduce the size ? what will you do ?
	Method 1: Use Minimal Base Images. ...
	Method 2: Use Docker Multistage Builds. ...
	Method 3: Minimize the Number of Layers. ...
	Method 4: Understanding Caching. ...
	Method 5: Use Dockerignore. ...
	Method 6: Keep Application Data Elsewhere.


6  * Diff bw layers and image ? 
	Each layer is an image itself, just one without a human-assigned tag.They have auto-generated IDs though.
        Each layer stores the changes compared to the image it's based on.

		we can't eddit images,but using images we can create  custom images by writting commands on Dockerfile.

                each command is layer this layers can be read and writtable,based on this layers will create New images. 
 
7  * If you give multiple entrypoints in Docker file, which will be executed and what happened to previous ones ?
	Latest ENTRYPOINT will be considered and all other ENTRYPOINT will be ignored.

		Latest entrypoint value is shown as output, previous entrypoint information is ignored
	
8  * By default in which user the container starts to execute cmds ?
		In Root user it will execute the commands.
		To change it, we can provide the group and user information in the dockerfile, so containers run via this image will be run/owned by the user mentioned in the dockerfile

                 FROM ubuntu:20.04
			RUN  apt-get update && apt-get install git -y
			RUN  groupadd <GROUP_NAME>
			RUN  useradd  <USER_NAME>
			RUN  usermod -aG <GROUP_NAME> <USER_NAME>
		ENTRYPOINT ["/bin/sh"]
9  *Docker socket ?
	A socket is an endpoint in a network that passes data between software. 
	Docker.sock is a Unix socket that enables the Docker server-side daemon, dockerd, to communicate with its command-line interface via a REST API.

10 * what is container Runtime(container engine) in Docker ?
		Docker engine is the container runtime, which creates and runs the contianers on host operating system.

11 * How do you mount a file system in docker container ?
	Bind Mounts
		-we can mount host machine file system(files and Directories) to the container.
			docker run -v <host_path>:<container_path>
	Docker Volumes		
		- These are docker managed filesystem and we use docker commands to manage these
		  volumes 
		- Volumes are easier to manage, backup or migrate than bind mounts.
		- Volumes supports many drivers which means we can maunt many types of filesystem.
		- Default location of docker volume is /var/lib/docker/volumes  	
		
		docker run -v <volume_name>:<container_path>
		
12 * Write a Dockerfile and push to dockerhub.
		Example dockerfile
			FROM  OS
			RUN 
			CMD []
			ENTRYPOINT [] 
		• First we tag our docker image 
			docker tag <image_name> <user_name>/<Tag_image_name>:tagname
		• Then we use docker push to push it to docker hub
			docker push  <user_name>/<Tag_image_name>:tagname
13 * docker file structure
			FROM  OS
			RUN 
			CMD []
			ENTRYPOINT []
14 * multistage dockerfile script
	FROM ubuntu AS stage1
	RUN apt-get update
	RUN apt-get install -y default-jre
	RUN apt-get install -y maven
	COPY ./java-project /home/java-project
	WORKDIR /home/java-project
	RUN mvn package

	FROM tomcat:9.0 AS stage2
	WORKDIR /usr/local/tomcat/webapps/
	COPY --from=stage1 /home/java-project/target/sparkjava-hello-world-1.0.war .


15 * dockerfile to install java 
	FROM ubuntu
	RUN apt-get update
	RUN apt-get install -y default-jre

16 * From command
	FROM is the first instruction in the every Dockerfile
	FROM is used to specify the base image on top of which all the other instruction will run in the same Dockerfile.
	FROM <image_name>:<tag>

17 * Publish & Expose
	EXPOSE <port_number>
	- Used to expose a port to the docker network 
	- This is make the  port accessable by all the other containers in the same docker network.

	Publish 
		PUBLISH = Expose + outside world port mapping 
	- publics will bind the container port to the host port which we can access from 
	  outside world using <host_ip>:<port_mapped>	
	- To publish a port 
		docker run -p <host_port>:<container_port> .....
		
	-P publish_all
		It binds all the exposed ports of the container to host machine port
		
	To map direct IP address to the host 
		port to port 
			ip:<host_port>:<container_port>
			ip::<container_port>
			
	Range of ports 
		many to one 
			-p 8080-8090:8080
		many to many 
			-p 8080-8085:8086-8091
			 - The total number of host ports in range should be same as the 
			   total number of container ports range.
18 * command to publish & expose
	EXPOSE <port_number> inside Docker File
	To publish a port 
		docker run -p <host_port>:<container_port> .....
19 * docker container
	A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably 
	from one computing environment to another.

20 * diff b/w cmd & entrypoint
		
21 * difference between cmd and run
		RUN --> use to install packages and softwares in a image, so when a container is initialized the image will contain the packages and software which was used via 'RUN'
		CMD --> setting executables when containers are initiated 

22 * If previous night the container had stopped working and terminated, how will you collect logs when you even dont have volume attach to it
	1.Find the stopped container via docker ps - a  
  	2.grab the container id of the failed container
	3.Substitute it in this command cat /var/lib/docker/containers/<container id>/<container id>-json.log

23 * What are security measures you took to secure the docker image
		Scan for vulnerabilities on a docker image
		Place the docker image in a private repository
24 * Which scanning mechanism you are using,to scan the images regularly
		Docker scan
			(or)
		JFROG xray tool  

25 * Do you use docker Swarm?
	Docker swarm is a container orchestration tool, meaning that it allows the user to manage multiple containers deployed across multiple host machines.
	One of the key benefits associated with the operation of a docker swarm is the high level of availability offered for applications.

29 * How u create docker image from Dockerfile?
		Syntax:: Docker build -t imagename .   {-t  is for tagname for your image}
30 * Difference between docker image and container?
		Docker image is a read only binary template through which one can deploy/create docker contianers, docker images contain the required configuration to run the containers
		Docker container --> they are isolated userspace having minimal OS along with required applications 
32 * I have created a custom container , how can I deliver it to the other users?
		By pushing the custom container to dockerhub and providing the url to be used by other users
33 * Where u store docker images in project?
		Public (or) private repository on a dockerhub
35 * write the docker file with all the commands and explain
		FROM  ubuntu
		RUN  apt updates
		CMD ["echo", "ls -ltr]
		ENTRYPOINT ["echo", "ps -ef"]

51 * how will u scan ur docker images for security vulnerabilities?
		Using docker scan (or) Jfrog Xray tool 
63 * VM vs Docker
		VM is based hardware virtualization, it has it's own complete OS and dedicated resources (CPU/RAM/DIsk), Docker is OS virtualization, where underlying OS/Kernel is shared between the containers 
64 * Why cant we use AWS AMI instead of Docker Image
		AMI is like a vm template, which is using hardware virtualization, Docker is OS virtualization, where underlying OS/Kernel is shared between the containers
68 * If you give multiple entrypoints in Docker file, which will be executed and what happened to previous ones ?
		Latest entrypoint will be executed and the previous ones will be ignored
69 * By default in which user the container starts to execute cmds ?
		Root
78 * What's docker file
		Docker file is a text file, which contains all commands a user could/can call to build/assemble an image 
87 * In dockerfile run the application which command u use - entrypoint, CMd
		FROM  ubuntu
		RUN  apt updates
		CMD ["echo", "ls -ltr]
		ENTRYPOINT ["echo", "ps -ef"]